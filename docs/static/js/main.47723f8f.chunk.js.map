{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","console","log","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAkBhD,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,Y,uBCVlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGjC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAMf,EAAMgB,IAAON,IACxB,+BAAMA,EAAN,OCJCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtBoB,QAAQC,IAAI,kDAFyB,MCDb,SAACrB,GAEzBoB,QAAQC,IAAI,uBAF0B,MAKZnC,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAPyB,mBAK/BC,EAL+B,KAKxBC,EALwB,KAkCtC,OAxBAJ,QAAQC,IAAI,WAAYE,GAExBE,qBAAU,WAGN1B,EAAQC,GACP0B,MAAK,SAAAC,GAEFH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAWlB,CAACtB,IACJoB,QAAQC,IAAI,0BAA2BE,GAEhCA,ED9B2BK,CAAa5B,GAAjCa,EAHuB,EAG7BN,KAAce,EAHe,EAGfA,QAItB,OAHAF,QAAQC,IAAI,2BAIR,oCACI,wBAAIL,UAAU,qCAAd,IAAoDhB,EAApD,KAEEsB,GAAW,uBAAGN,UAAU,oCAAb,WAEb,yBAAKA,UAAU,aAGPH,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACImB,IAAKnB,EAAIC,IACLD,UEQjBoB,EA3BM,WACjBV,QAAQC,IAAI,6BADW,MAGanC,mBAAS,CAAC,WAHvB,mBAGhB6C,EAHgB,KAGJ9C,EAHI,KAMvB,OACI,oCACI,6CACA,kBAAC,EAAD,CAAaA,cAAiBA,IAC9B,6BAEA,4BAEQ8C,EAAWtB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACIA,SAAWA,EACX6B,IAAM7B,UCflCgC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.47723f8f.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleChangeInput = (e) => {\n\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2 ) {\n            setCategories( cats =>  [inputValue, ...cats]);\n            setInputValue(''); \n        }\n    }\n\n    return (\n        <form onSubmit= { handleSubmit } >\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleChangeInput}\n            />\n        </form>\n    );\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n};\n\n\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=Pa5DSJppLd2PFW9Be26rHbS1Z5UTPDKp`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n}\n","import React from 'react'\n\nexport const GifGridItem = ({ title, url }) => {\n\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={  title }/>\n            <p> { title } </p>\n        </div>\n    )\n}\n ","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    console.log('Renderizando GifGrid y voy a llamar a useFetch');\n    const { data: images, loading } = useFetchGifs(category);\n    console.log('Wa renderizar a GifGrid');\n    \n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\n\n            { loading && <p className=\"animate__animated animate__flash\" >Loading</p> }\n             \n            <div className=\"card-grid\">\n\n                {\n                    images.map(img => (\n                        <GifGridItem\n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }    \n            </div>\n        </>\n\n    );\n}\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n\n    console.log('Utilizando useFetch');\n\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    console.log('estado: ', state);\n    \n    useEffect(() => {\n        \n        \n        getGifs(category)\n        .then(imgs => {\n            \n            setState({\n                data: imgs,\n                loading: false\n            })\n          /*   \n            setTimeout(() => {\n                \n            }, 4000);\n             */\n            \n        })\n        \n        \n    }, [category]); // category es la dependecia, es decir, si cambia su valor, se ejecuta \n    console.log('wa retornar el estado: ', state);\n    \n    return state; // { data: [], loading: true }\n};","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n    console.log('Renderizando GifExpertApp');\n\n    const [categories, setCategories] = useState(['Naruto']);\n    \n\n    return (\n        <>\n            <h2>GiftExpertApp</h2>\n            <AddCategory setCategories= { setCategories }  />\n            <hr />\n          \n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid \n                            category={ category } \n                            key={ category }\n                        />\n                    )) \n                }\n            </ol>\n        </>\n    );\n\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}